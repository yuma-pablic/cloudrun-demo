version: '3.8'

services:
  db:
    image: postgres:16
    container_name: db
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - my_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin"]
      interval: 10s
      timeout: 5s
      retries: 5

  migrate:
    image: arigaio/atlas:latest
    container_name: migrate
    command: >
      migrate apply
      --dir file:///go/migrations
      --url postgresql://admin:admin@db:5432/app?sslmode=disable
      --allow-dirty
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - ./go/migrations/:/migrations
    networks:
      - my_network

  node-exporter:
    image: prom/node-exporter:v1.9.1
    container_name: node-exporter
    ports:
      - '9100:9100'
    networks:
      - my_network
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:v0.17.1
    container_name: postgres-exporter
    environment:
      DATA_SOURCE_NAME: "postgresql://admin:admin@db:5432/app?sslmode=disable"
    networks:
      - my_network
    depends_on:
      - db
    ports:
      - "9187:9187"

  grafana-alloy:
    image: grafana/alloy:v1.8.1
    container_name: grafana-alloy
    working_dir: /etc/alloy
    command: ["run", "/etc/alloy/config.alloy"]
    volumes:
      - ./logs:/logs
      - ./o11y/alloy:/etc/alloy
    networks:
      - my_network
    ports:
      - "9999:9999"
  tempo:
    image: grafana/tempo:latest
    container_name: tempo
    command: ["-config.file=/etc/tempo/tempo.yaml"]
    volumes:
      - ./o11y/tempo/tempo.yaml:/etc/tempo/tempo.yaml
    ports:
      - "3200:3200"
      - "4317:4317"
      - "4318:4318"
    networks:
      - my_network

  prometheus:
   image: prom/prometheus:v3.3.0
   container_name: prometheus
   ports:
     - '9090:9090'
   volumes:
     - './o11y/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml'
     - 'prometheus-data:/prometheus'
   command:
     - '--config.file=/etc/prometheus/prometheus.yml'
     - '--web.enable-remote-write-receiver'
   networks:
     - my_network
  loki:
    container_name: loki
    image: grafana/loki:3.4.3
    command: "-config.file=/etc/loki/loki.yaml"
    environment:
      LOG_CLUSTER_DEPTH: '8'
      LOG_SIM_TH: '0.3'
    volumes:
      - ./o11y/loki/loki.yaml:/etc/loki/loki.yaml
    networks:
      - my_network
    ports:
      - 3100:3100
  pyroscope:
    image: grafana/pyroscope:1.12.2
    container_name: pyroscope
    ports:
      - "4040:4040"
    networks:
      - my_network
  grafana:
    image: grafana/grafana:11.6.0
    container_name: grafana
    ports:
      - 3000:3000
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_DATABASE_TYPE: postgres
      GF_DATABASE_HOST: db:5432
      GF_DATABASE_NAME: postgres
      GF_DATABASE_USER: admin
      GF_DATABASE_PASSWORD: admin
      GF_DATABASE_SSL_MODE: disable
      GF_INSTALL_PLUGINS: grafana-pyroscope-app,https://storage.googleapis.com/integration-artifacts/grafana-lokiexplore-app/grafana-lokiexplore-app-latest.zip;grafana-lokiexplore-app
    restart: unless-stopped
    volumes:
      - 'grafana_storage:/var/lib/grafana'
      - './o11y/grafana/datasources:/etc/grafana/provisioning/datasources'
      - './o11y/grafana/dashboards:/var/lib/grafana/dashboards'
      - './o11y/grafana/dashboard.yml:/etc/grafana/provisioning/dashboards/dashboard.yml'
    networks:
      - my_network
    depends_on:
      db:
        condition: service_healthy

volumes:
  pgdata:
  grafana_storage:
  prometheus-data:
networks:
  my_network:
