prometheus.exporter.postgres "example" {
  data_source_names = ["postgresql://admin:admin@db:5432/app?sslmode=disable"]
}

prometheus.scrape "default" {
  targets    = prometheus.exporter.postgres.example.targets
  forward_to = [prometheus.remote_write.demo.receiver]
}

prometheus.remote_write "demo" {
  endpoint {
    url = "http://prometheus:9090/api/v1/write"
  }
}

prometheus.exporter.unix "demo" { }

prometheus.scrape "demo" {
  targets    = prometheus.exporter.unix.demo.targets
  forward_to = [prometheus.remote_write.demo.receiver]
}

prometheus.scrape "app" {
  targets = [
    {"__address__" = "0.0.0.0:8080"},
  ]
  metrics_path = "/metrics"
  scrape_interval = "15s"
  forward_to = [prometheus.remote_write.demo.receiver]
}

local.file_match "logs" {
  path_targets = [
    {
      __path__ = "/logs/app.log",
      job      = "app",
      service_name = "api",
    },
  ]
}

loki.source.file "app" {
  targets = local.file_match.logs.targets
  forward_to = [loki.write.default.receiver]
}

loki.write "default" {
  endpoint {
    url = "http://loki:3100/loki/api/v1/push"
  }
}

loki.process "app" {
 stage.json  {
    expressions = {
      time  = "time",
      level = "level",
      msg   = "msg",
      trace_id = "trace_id",
    }
  }

  stage.timestamp  {
    source = "time"
    format = "2006-01-02T15:04:05.000000Z07:00"
  }

  stage.labels  {
    values = {
      trace_id = "",
      level = "",
    }
  }

  forward_to = [loki.write.default.receiver]
}

pyroscope.write "app" {
        endpoint {
                url = "http://pyroscope:4040"
        }
}

pyroscope.scrape "scrape_job_name" {
        targets = [
             {"__address__" = "host.docker.internal:8080"},
        ]
        forward_to = [pyroscope.write.app.receiver]

        profiling_config {
                profile.process_cpu {
                        enabled = true
                }

                profile.godeltaprof_memory {
                        enabled = false
                }

                profile.memory {
                        enabled = false
                }

                profile.godeltaprof_mutex {
                        enabled = false
                }

                profile.mutex {
                        enabled = false
                }

                profile.godeltaprof_block {
                        enabled = false
                }

                profile.block {
                        enabled = false
                }

                profile.goroutine {
                        enabled = true
                }
        }
}

otelcol.exporter.otlp "default" {
  client {
    endpoint = "tempo:4317"

    tls {
      insecure = true
    }
  }
}

otelcol.processor.batch "default" {
  timeout = "1s"

  output {
    traces = [
      otelcol.exporter.otlp.default.input,
    ]
  }
}

otelcol.processor.memory_limiter "default" {
  check_interval = "1s"

  limit = "200MiB"

  output {
    traces = [
      otelcol.processor.batch.default.input,
    ]
  }
}

otelcol.receiver.otlp "default" {
  grpc {}
  http {
    endpoint = "0.0.0.0:9999"
  }

  output {
    traces = [
      otelcol.processor.memory_limiter.default.input,
      otelcol.connector.spanlogs.default.input,
    ]
  }
}

otelcol.connector.spanlogs "default" {
  roots = true
  span_attributes = ["http.method", "http.target"]

  output {
    logs = [otelcol.exporter.otlp.default.input]
  }
}